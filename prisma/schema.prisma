// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["orderByRelation"]
}

model Recipe {
  id             String          @id @default(uuid())
  title          String
  subtitle       String
  description    String
  submittedBy    User            @relation("submittedRecipes", fields: [submittedById], references: [id])
  submittedById  String
  createdAt      DateTime        @default(now())
  servingCount   Int
  timeEstimate   DateTime
  previewURI     String
  steps          RecipeStep[]
  ingredients    Ingredient[]
  recipeComments RecipeComment[]
  likedBy        User[]          @relation("likedRecipes")
  savedBy        User[]          @relation("savedRecipes")
  visibility     Privacy         @default(FRIENDS)
  commentability Privacy         @default(PRIVATE)
  likeability    Privacy         @default(PRIVATE)
  categories     Category[]
  diets          Diet[]
  allergies      Allergies[]
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  recipes Recipe[]
}

model Allergies {
  id      String   @id @default(uuid())
  name    String   @unique
  recipes Recipe[]
  User    User?    @relation(fields: [userId], references: [id])
  userId  String?
}

model Diet {
  id      String   @id @default(uuid())
  name    String   @unique
  recipes Recipe[]
  User    User?    @relation(fields: [userId], references: [id])
  userId  String?
}

enum Privacy {
  PRIVATE
  FRIENDS
  PUBLIC
}

model RecipeStep {
  id          String @id @default(uuid())
  recipe      Recipe @relation(fields: [recipeId], references: [id])
  recipeId    String
  imageURI    String
  title       String
  description String
}

model RecipeComment {
  id              String          @id @default(uuid())
  author          User            @relation(fields: [userId], references: [id])
  userId          String
  recipe          Recipe          @relation(fields: [recipeId], references: [id])
  recipeId        String
  replies         RecipeComment[] @relation("RecipeCommentToRecipeComment")
  contents        String
  likedBy         User[]          @relation("likedComments")
  replyTo         RecipeComment?  @relation("RecipeCommentToRecipeComment", fields: [recipeCommentId], references: [id])
  recipeCommentId String?
  deleted         Boolean         @default(false)
}

model Ingredient {
  id                  String            @id @default(uuid())
  genericIngredient   GenericIngredient @relation(fields: [genericIngredientId], references: [id])
  description         String?
  quantity            Int
  unit                String?
  recipe              Recipe            @relation(fields: [recipeId], references: [id])
  recipeId            String
  genericIngredientId String
}

model GenericIngredient {
  id         String       @id @default(uuid())
  name       String       @unique
  Ingredient Ingredient[]
}

model User {
  id                 String          @id @default(uuid())
  firstName          String
  lastName           String
  bio                String?
  email              String          @unique
  password           String
  avatarURI          String?
  dietaryPreferences Diet[]
  allergyPreferences Allergies[]
  likedRecipes       Recipe[]        @relation("likedRecipes")
  savedRecipes       Recipe[]        @relation("savedRecipes")
  recipeComments     RecipeComment[]
  submittedRecipes   Recipe[]        @relation("submittedRecipes")
  verified           Boolean         @default(false)
  likedCommemts      RecipeComment[] @relation("likedComments")
  following          Follows[]       @relation("following")
  followedBy         Follows[]       @relation("followers")
  createdAt          DateTime        @default(now())
  visibility         Privacy         @default(PUBLIC)
}

model Follows {
  follower    User   @relation("followers", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followingId, followerId])
}
